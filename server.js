const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const bodyParser = require('body-parser');
const crypto = require('crypto');

const app = express();
const PORT = process.env.PORT || 3000;

const db = new sqlite3.Database('./database.db');
db.run(`CREATE TABLE IF NOT EXISTS urls (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  code TEXT UNIQUE,
  longUrl TEXT,
  clicks INTEGER DEFAULT 0,
  createdAt DATETIME DEFAULT CURRENT_TIMESTAMP
)`);

app.use(express.static('public'));
app.use(bodyParser.urlencoded({ extended: true }));

app.post('/shorten', (req, res) => {
  console.log('POST /shorten –∑–∞–ø–∏—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ');

  const longUrl = req.body.url;
  const customCode = req.body.custom || '';
  const code = customCode !== '' ? customCode : crypto.randomBytes(3).toString('hex');

  if (!longUrl || !longUrl.startsWith('http')) {
    console.log('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:', longUrl);
    return res.status(400).send('–ù–µ–≤–∞–ª—ñ–¥–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è');
  }

  console.log('‚úÖ –ü–æ—Å–∏–ª–∞–Ω–Ω—è:', longUrl);
  console.log('üÜî –ö–æ–¥:', code);

  db.get(`SELECT * FROM urls WHERE code = ?`, [code], (err, row) => {
    if (row) {
      console.log('‚ö†Ô∏è –ö–æ–¥ –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π:', code);
      return res.status(400).send('–¶–µ–π –∫–æ–¥ –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π.');
    }

    db.run(`INSERT INTO urls (code, longUrl) VALUES (?, ?)`, [code, longUrl], function (err) {
      if (err) {
        console.log('üí• DB Insert Error:', err.message);
        return res.status(500).send('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤ –±–∞–∑—É');
      }

      const fullUrl = `${req.protocol}://${req.get('host')}/${code}`;
      console.log('‚úÖ –ö–æ—Ä–æ—Ç–∫–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ:', fullUrl);
      res.send(fullUrl);
    });
  });
});

app.get('/:code', (req, res) => {
  const code = req.params.code;
  db.get(`SELECT * FROM urls WHERE code = ?`, [code], (err, row) => {
    if (row) {
      db.run(`UPDATE urls SET clicks = clicks + 1 WHERE code = ?`, [code]);
      res.redirect(row.longUrl);
    } else {
      res.status(404).send('–°–∫–æ—Ä–æ—á–µ–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    }
  });
});

app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:${PORT}`);
});